Many PHP applications need to store files. There are many different reasons to store file, and not all filesystems are created equally. How can we identify our needs? Which filesystem is best for your use-case? How can we ensure our future needs are not blocked by the code we write today? In this talk we'll explore how filesystem abstraction and general coding guidelines can improve our application's and make them future proof!

By Frank de Jonge


- ha van egy "uploads" mappád kikaptál: honna jöttek? törölhetőek-e?
- Feedback loop: user adoptions után kell igazából egy második nagy tervezés
- Lehet nested vagy linear. *Bazsek, ennek nézzél utána.
	- mi a közös? csak az hogy vannak fájlok. lineárba pl mappák nincsenek.
	- FS = NAS
		- AWS Volume, DO Blob store, Gluster
	- Not Really FS
		- WebDav, Prosgres Large Object Storage
- "A komplexitás abból jön, hogy egy dolognak két feladata lesz."
- FS - CRUD only + inspect&list (nem access controll, konvertálás, ..) - CRUDLI : )
- A felhő (s3, ..) lineáris rendszerint.

PHP + FS
- RW is easy, beépített függvények
- glob/scandir/readdir(opendir( - melyik a jó?? 
- nagy fájlok fread/fwrite, nem kézenfekvő, hibakezeléssel min 14 sor

Flysystem
- Egységes felület, a kódban nem kompenzálsz a konkrét tároló sajátosságaira, egy egységes és absztrakt nyelvet beszélsz (másold, írd, töröld, ..)-
- Stream támogatás: kis memóriával tudsz pl. több gigát Azure-ból AWS-be bemásolni.
- Relativ útvonalak - mindennek van. 
	Minden kap egy konfigolt gyökeret, de neked nem kell a kódban csak relatív útvonalakkal dolgoznod.
